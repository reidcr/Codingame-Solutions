//
// The purpose of this program is to input a number of horse strengths, identify the
// two closest strengths, and output their difference. Algorithm:
//
// 1. Input the number of strengths and initialize an array to contain all the
//    different horse strengths.
// 2. Use the qsort function to sort the array of horse strengths in ascending order.
// 3. Go through the sorted array, calculate the difference between two adjoining
//    elements, and save that value if it is smaller than the previous "smallest"
//    value.
// 4. Output the final saved value, which will be the difference between the two
//    closest horse strengths.
//

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <limits.h>

// comparison function to be used for qsort function
int Compare(const void *xp, const void *yp)
{
    if (*((int *)xp) > *((int *)yp))
        return(1);
    else if (*((int *)xp) < *((int *)yp))
        return(-1);
    else
        return(0);
}

int main()
{
    int numHorse;           // number of horse strengths to be compared
    int diff = INT_MAX;     // initialize difference value to max value int can hold
    // builds array containing strengths of all the horses
    scanf("%d", &numHorse);
    int strengths[numHorse];
    memset(strengths, 0, numHorse * sizeof(int));
    for (int i = 0; i < numHorse; ++i)
    {
        scanf("%d\n", &strengths[i]);
    }

    // sorts horse strengths in ascending order
    qsort(strengths, numHorse, sizeof(int), Compare);

    // goes through strength array and finds the smallest difference between two
    // adjoining elements
    int newDiff;
    for (int j = 1; j < numHorse; ++j)
    {
        newDiff = strengths[j] - strengths[j - 1];
        if (newDiff < diff)
        {
            diff = newDiff;
        }
    }

    printf("%d\n", diff);           // prints smallest strength difference

    return(EXIT_SUCCESS);
}

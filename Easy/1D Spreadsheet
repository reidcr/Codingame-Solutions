//
// The purpose of this program is to input a 1D spreadsheet, resolve all of the
// spreadsheet formulae, and output the value of all its cells.  Some cells will
// contain references to other cells that need to be evaluated first.  Algorithm:
//
// 1. Define a structure containing strings for the operations and arguments,
//    operand values and cell values, a flag to indicate whether the calculation
//    was performed, and pointers to the next cells as denoted by the references
//    to other cells.
// 2. Input the number of entries in the spreadsheet and allocate memory for the
//    spreadsheet.
// 3. Loop through each entry, input the desired operations and arguments, set
//    the calculate flag to false, and set references to other cells as needed.
// 4. Loop through each cell and evaluate its value.
//    A. Check to see if the calculate flag is true, if so return the cell value.
//    B. Check to see whether the first cell contains a reference to another cell,
//      if so, recursively call the evaluation function to evaluate the referenced
//      cell.
//    C. Check to see whether the second cell contains a reference to another cell,
//      if so, recursively call the evaluation function to evaluate the referenced
//      cell.
//    D. Once an entry has been reached that contains no references to other cells,
//      evaluate the value of that entry and work backwards until reaching another
//      entry with an unreconciled cell reference.
//    E. Once all recursive calls have been returned, the return value of the
//      current function call will be the value of the current entry.
//    F. Print this returned value, then repeat the loop until all entries have
//      been evaluated.
//

#include <stdlib.h>
#include <stdio.h>
#include <stdbool.h>

#define MAXOPLEN 6              // max length of operation string
#define MAXARGLEN 7             // max length of arg strings

// allocates memory and tests for success
void *SafeMalloc(int amount, size_t size)
{
    void *vp;
    if ((vp = malloc(amount * size)) == NULL)
    {
        fprintf(stderr, "Out of memory\n");
        exit(EXIT_FAILURE);
    }
    return(vp);
}

// defines structure for each cell in 1D spreadsheet
struct cell
{
    // strings containing operations and arguments
    char op[MAXOPLEN], arg1[MAXARGLEN], arg2[MAXARGLEN];
    int val1, val2, cellValue;      // stores operands and operation results
    bool calcFlag;                  // indicates whether calculation was performed
    struct cell *c1, *c2;           // references to other cells
};

void ComputeValue(struct cell *cP)
{
    switch(*cP->op)                 // performs denoted operation
    {
        case 'V':
            cP->cellValue = cP->val1;
            break;
        case 'A':
            cP->cellValue = cP->val1 + cP->val2;
            break;
        case 'S':
            cP->cellValue = cP->val1 - cP->val2;
            break;
        default:
            cP->cellValue = cP->val1 * cP->val2;
            break;
    }
    cP->calcFlag = true;            // sets flag to true after cell value calculated
}

int Evaluate(struct cell *cP)
{
    if (cP->calcFlag)               // checks whether cell value has been calculated
    {
        return(cP->cellValue);      // returns calculated cell value
    }
    if (cP->c1)                     // checks for presence of reference to other cell
    {
        cP->val1 = Evaluate(cP->c1);// moves to referred cell
    }
    if (cP->c2)                     // checks for presence of reference to other cell
    {
        cP->val2 = Evaluate(cP->c2);// moves to referred cell
    }
    ComputeValue(cP);               // computes value once operands have been found
    return(cP->cellValue);          // returns calculated cell value
}

int main()
{
    int inCells;
    scanf("%d", &inCells);          // inputs number of cells in 1D spreadsheet
    // allocates memory for spreadsheet
    struct cell *pCell = SafeMalloc(inCells, sizeof(struct cell));
    // loops through each cell, inputs operations and arguments, sets calculate flag 
    // to false, and sets references
    for (int i = 0; i < inCells; ++i)
    {
        scanf("%s%s%s\n", pCell[i].op, pCell[i].arg1, pCell[i].arg2);
        pCell[i].calcFlag = false;
        if (pCell[i].arg1[0] == '$')
        {
            pCell[i].c1 = &pCell[atoi(pCell[i].arg1 + 1)];
        }
        else
        {
            pCell[i].val1 = atoi(pCell[i].arg1);
            pCell[i].c1 = NULL;
        }

        if (pCell[i].arg2[0] == '$')
        {
            pCell[i].c2 = &pCell[atoi(pCell[i].arg2 + 1)];
        }
        else if (pCell[i].arg2[0] != '_')
        {
            pCell[i].val2 = atoi(pCell[i].arg2);
            pCell[i].c2 = NULL;
        }
    }

    // loops through each cell and evaluates its value
    for (int i = 0; i < inCells; ++i)
    {
        printf("%d\n", Evaluate(&pCell[i]));
    }
    free(pCell);        // frees allocated memory for spreadsheet
    return(EXIT_SUCCESS);
}
